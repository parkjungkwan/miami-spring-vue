plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.1.0'
    /**
     * vue-project를 build하기 위한 설정
     * - node gradle plugin 추가
     */
    id "com.github.node-gradle.node" version "3.0.1"
}

group = 'kr.fastcode'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

node {
    version = '16.14.2' // 설치할 node 버전
    npmVersion = '9.1.3' // 설치할 yarn 버전
    download = true
    distBaseUrl = 'https://nodejs.org/dist' // node를 다운받을 수 있는 주소
    workDir = file("${project.rootDir}/.gradle/nodejs") // node를 설치할 폴더를 설정
    npmWorkDir = file("${project.rootDir}/.gradle/npm") // yarn을 설치할 폴더를 설정
    nodeProjectDir = file("${project.rootDir}/vue")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.postgresql', name: 'postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.1.5.Final'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    //implementation 'org.springframework.security:spring-security-test'
    implementation group: 'javax.validation', name: 'validation-api'
    implementation "com.moowork.gradle:gradle-node-plugin:1.2.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

/**
 * vue-project를 build하기 위한 설정
 * - node gradle 추가
 */
apply plugin: 'com.github.node-gradle.node'

/**
 * vue-project를 build하기 위한 설정
 * - vue-project의 기존 빌드 결과물을 제거하기 위한 task
 */
task deleteVueBuildFiles(type: Delete) {
    delete "src/main/resources/static", "src/main/resources/static/index.html", "${project.projectDir}/vue/node_modules"
}

/**
 * vue-project를 build하기 위한 설정
 * - vue-project를 빌드하기 위한 npm build task
 *
 * dependsOn에 'deleteVueBuildFiles', 'npmInstall' task 정보를 지정하였으므로
 * npmBuild task는 위 두 task에 의존한다는 것이고,
 * npmBuild가 실행되기 전 위 두 task가 차례대로 먼저 실행됩니다.
 * deleteVueBuildFiles task는 빌드 결과물을 제거하기 위하여 별도 만든 task이고,
 * npmInstall task는 node plugin에서 제공하는 task입니다.
 */
task npmBuild(type: NpmTask, dependsOn: ['deleteVueBuildFiles', 'npmInstall']) {
    args = ["run", "build"]
}

/**
 * vue-project를 build하기 위한 설정
 * node gradle에서 제공하는 npmInstall task를 어느 시점에 실행시켜 줄지 지정해주는 것입니다.
 * "gradle build 시 수행되는 processResources task가 실행되기 전에 npmBuild task를 실행하라"
 *
 * 그리고 npmBuild task의 의존으로 deleteVueBuildFiles, npmInstall task가 있으므로,
 * "npmBuild task가 실행하기 전에 deleteVueBuildFiles, npmInstall task를 순서대로 실행하라."
 *
 * 정리한 task 실행 순서는
 * 1) deleteVueBuildFiles
 * 2) npmInstall
 * 3) npmBuild
 * 4) processResources
 * 입니다.
 */
processResources.dependsOn 'npmBuild'


test {
    useJUnitPlatform()
}
